// --------------------
//
//
// * CONFIG
//
//
// --------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
//
//
// * ENUMS
//
//
// --------------------
enum UserRole {
  USER
  MANAGER
  ADMIN
}

enum AccountType {
  FAN
  PERFORMER
  VENUE
  ORGANIZER
}

enum ProfileType {
  MUSICIAN
  BAND
  VENUE
  ORGANIZER
}

// --------------------
//
//
// * AUTH
//
//
// --------------------
model AuthAccount {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Credentials {
  id                    String  @id @default(cuid())
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  accessToken           String? @map("accessToken")
  accessTokenExpiresAt  Int?
  refreshToken          String?
  refreshTokenExpiresIn Int?

  @@index([userId])
}

// --------------------
//
//
// * USER
//
//
// --------------------
model User {
  // * METADATA
  id            String      @id @default(cuid())
  role          UserRole    @default(USER)
  accountType   AccountType @default(FAN)
  isActive      Boolean     @default(true)
  isVerified    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  lastUpdatedAt DateTime    @updatedAt

  // * AUTH / CREDENTIALS
  password    String
  credentials Credentials[]
  sessions    AuthSession[]

  // * BASIC INFO
  username  String? @unique
  email     String? @unique
  firstName String?
  lastName  String?
  avatarUrl String?

  // * ACCOUNT RELATIONS
  managedAccounts    AuthAccount[]
  favoritedAccounts  AuthAccount[] @relation("AccountsFavoritedByUser")
  associatedAccounts AuthAccount[] @relation("AccountAssociateUsers")

  // * EVENT RELATIONS
  bookmarkedEvents Event[] @relation("UserBookmarkedEvents")
  registeredEvents Event[] @relation("EventRegisteredUsers")
  publishedEvents  Event[] @relation("UserPublishedEvents")
  managedEvents    Event[] @relation("UserManagedEvents")

  createdEvents         Event[]         @relation("UserCreatedEvents")
  eventEdits            Event[]         @relation("UserEventEdits")
  createdEventTemplates EventTemplate[] @relation("UserCreatedEventTemplates")
  eventTemplateEdits    EventTemplate[] @relation("UserEventTemplateEdits")

  administratorOf Event[] @relation("EventAdministrators")
  editorOf        Event[] @relation("EventEditors")

  // * NETWORKS
  networks Network[]

  // * CONTENT
  posts    Post[]
  comments Comment[]

  likedPosts  Post[] @relation("PostsLikedByUsers")
  sharedPosts Post[] @relation("PostsSharedByUsers")
}
